`begin_keywords "1800-2017"
`line 1 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 1
 
 
 
 



`line 12 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0

`line 12 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0

`line 12 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0

`line 12 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0

`line 12 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
 

`line 14 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
 
`line 14 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
`line 1 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 1
 
`line 2 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
 
 

`line 5 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
 
 
 

`line 9 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
 
 

`line 12 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
 
  
   
     
     
       
       
    
  







`line 28 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
 
 


`line 32 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
 





































`line 70 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
 
  
 
  
 
  
  

`line 78 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
  
  







`line 87 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
 




`line 92 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
 




`line 97 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
 












`line 110 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
 






`line 117 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
 






`line 124 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
 




`line 129 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 0
  

`line 131 "/home/merl-lab/GSoC/azadi-II/src/vendor/lowrisc_ibex/vendor/lowrisc_ip/prim/rtl/prim_assert.sv" 2
`line 14 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0


`line 16 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
module ibex_decoder #(
    parameter bit RV32E                = 0,
    parameter ibex_pkg::rv32m_e   RV32M = ibex_pkg::RV32MFast,
    parameter ibex_pkg::rv32b_e   RV32B = ibex_pkg::RV32BNone,
    parameter ibex_pkg::rvfloat_e RVF   = ibex_pkg::RV32FSingle,
    parameter bit BranchTargetALU      = 0
) (
    input  logic                 clk_i,
    input  logic                 rst_ni,

`line 26 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
    output logic                 illegal_insn_o,         
    output logic                 ebrk_insn_o,            
    output logic                 mret_insn_o,            
                                                         
    output logic                 dret_insn_o,            
    output logic                 ecall_insn_o,           
    output logic                 wfi_insn_o,             
    output logic                 jump_set_o,             
    input  logic                 branch_taken_i,         
    output logic                 icache_inval_o,

`line 38 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
    input  logic                 instr_first_cycle_i,    
    input  logic [31:0]          instr_rdata_i,          
    input  logic [31:0]          instr_rdata_alu_i,      
                                                         

`line 44 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    input  logic                 illegal_c_insn_i,       

`line 46 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
    output ibex_pkg::imm_a_sel_e  imm_a_mux_sel_o,        
    output ibex_pkg::imm_b_sel_e  imm_b_mux_sel_o,        
    output ibex_pkg::op_a_sel_e   bt_a_mux_sel_o,         
    output ibex_pkg::imm_b_sel_e  bt_b_mux_sel_o,         
    output logic [31:0]           imm_i_type_o,
    output logic [31:0]           imm_s_type_o,
    output logic [31:0]           imm_b_type_o,
    output logic [31:0]           imm_u_type_o,
    output logic [31:0]           imm_j_type_o,
    output logic [31:0]           zimm_rs1_type_o,

`line 58 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
    output ibex_pkg::rf_wd_sel_e rf_wdata_sel_o,    
    output logic                 rf_we_o,           
    output logic [4:0]           rf_raddr_a_o,
    output logic [4:0]           rf_raddr_b_o,
    output logic [4:0]           rf_waddr_o,
    output logic                 rf_ren_a_o,           
    output logic                 rf_ren_b_o,           

`line 67 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
    output ibex_pkg::alu_op_e    alu_operator_o,        
    output ibex_pkg::op_a_sel_e  alu_op_a_mux_sel_o,    
                                                        
    output ibex_pkg::op_b_sel_e  alu_op_b_mux_sel_o,    
                                                        
    output logic                 alu_multicycle_o,      

`line 75 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
    output logic                 mult_en_o,              
    output logic                 div_en_o,               
    output logic                 mult_sel_o,             
    output logic                 div_sel_o,              

`line 81 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    output ibex_pkg::md_op_e     multdiv_operator_o,
    output logic [1:0]           multdiv_signed_mode_o,

`line 84 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
    output logic                 csr_access_o,           
    output ibex_pkg::csr_op_e    csr_op_o,               

`line 88 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
    output logic                 data_req_o,             
    output logic                 data_we_o,              
    output logic [1:0]           data_type_o,            
                                                         
    output logic                 data_sign_extension_o,  
                                                         

`line 96 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
    output logic                 jump_in_dec_o,          
    output logic                 branch_in_dec_o,

`line 100 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
    output fpnew_pkg::roundmode_e fp_rounding_mode_o,       

`line 103 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    output logic [4:0]            fp_rf_raddr_a_o,
    output logic [4:0]            fp_rf_raddr_b_o,
    output logic [4:0]            fp_rf_raddr_c_o,
    output logic                  fp_rf_ren_a_o,
    output logic                  fp_rf_ren_b_o,
    output logic                  fp_rf_ren_c_o,

`line 110 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    output logic [4:0]            fp_rf_waddr_o,
    output logic                  fp_rf_we_o,

`line 113 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    output fpnew_pkg::operation_e fp_alu_operator_o,
    output logic                  fp_alu_op_mod_o,
    output logic                  fp_rm_dynamic_o,
    output fpnew_pkg::fp_format_e fp_src_fmt_o,
    output fpnew_pkg::fp_format_e fp_dst_fmt_o,
    output logic                  is_fp_instr_o,
    output logic                  use_fp_rs1_o,
    output logic                  use_fp_rs2_o,
    output logic                  use_fp_rs3_o,
    output logic                  use_fp_rd_o,
    output logic                  fp_swap_oprnds_o,
    output logic                  fp_load_o,
    output logic                  mv_instn_xw_o,
    output logic                  mv_instn_wx_o,
    output logic                  fpu_to_int_rf_o,
    output logic                  fflags_en_id_o
);

`line 131 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
  import ibex_pkg::*;
  import fpnew_pkg::*;

`line 134 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
  logic        fp_invalid_rm;

`line 136 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
  logic        illegal_insn;
  logic        illegal_reg_rv32e;
  logic        csr_illegal;
  logic        rf_we;

`line 141 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
  logic [31:0] instr;
  logic [31:0] instr_alu;
  logic [9:0]  unused_instr_alu;
   
  logic [4:0] instr_rs1;
  logic [4:0] instr_rs2;
  logic [4:0] instr_rs3;
  logic [4:0] instr_rd;

`line 150 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
  logic        use_rs3_d;
  logic        use_rs3_q;

`line 153 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
  csr_op_e     csr_op;

`line 155 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
  opcode_e     opcode;
  opcode_e     opcode_alu;

`line 158 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
   
   
  assign instr     = instr_rdata_i;
  assign instr_alu = instr_rdata_alu_i;

`line 164 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
   
   

`line 168 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
  assign imm_i_type_o = { {20{instr[31]}}, instr[31:20] };
  assign imm_s_type_o = { {20{instr[31]}}, instr[31:25], instr[11:7] };
  assign imm_b_type_o = { {19{instr[31]}}, instr[31], instr[7], instr[30:25], instr[11:8], 1'b0 };
  assign imm_u_type_o = { instr[31:12], 12'b0 };
  assign imm_j_type_o = { {12{instr[31]}}, instr[19:12], instr[20], instr[30:21], 1'b0 };

`line 175 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
  assign zimm_rs1_type_o = { 27'b0, instr_rs1 };  

`line 178 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
  if (RV32B != RV32BNone) begin : gen_rs3_flop
     
    always_ff  @(posedge clk_i or negedge rst_ni) begin
      if (!rst_ni) begin
        use_rs3_q <= 1'b0;
      end else begin
        use_rs3_q <= use_rs3_d;
      end
    end
  end else begin : gen_no_rs3_flop
     
    assign use_rs3_q = use_rs3_d;
  end

`line 192 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
  assign instr_rs1 = instr[19:15];
  assign instr_rs2 = instr[24:20];
  assign instr_rs3 = instr[31:27];
  assign rf_raddr_a_o = (use_rs3_q & ~instr_first_cycle_i) ? instr_rs3 : instr_rs1;  
  assign rf_raddr_b_o = instr_rs2;  

`line 199 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
  assign instr_rd = instr[11:7];
  assign rf_waddr_o   = instr_rd;  

`line 203 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
  assign fp_rf_raddr_a_o = instr_rs1;
  assign fp_rf_raddr_b_o = instr_rs2;
  assign fp_rf_raddr_c_o = instr_rs3;

`line 208 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
  assign fp_rf_waddr_o   = instr_rd;

`line 211 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
  assign fp_rounding_mode_o = roundmode_e'(instr[14:12]);
  assign fp_invalid_rm      = (instr[14:12] == 3'b101) ? 1'b1 :
                              (instr[14:12] == 3'b110) ? 1'b1 : 1'b0;
  assign fp_rm_dynamic_o    = (instr[14:12] == 3'b111) ? 1'b1 : 1'b0;


`line 217 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
   
   
  if (RV32E) begin : gen_rv32e_reg_check_active
    assign illegal_reg_rv32e = ((rf_raddr_a_o[4] & (alu_op_a_mux_sel_o == OP_A_REG_A)) |
                                (rf_raddr_b_o[4] & (alu_op_b_mux_sel_o == OP_B_REG_B)) |
                                (rf_waddr_o[4]   & rf_we));
  end else begin : gen_rv32e_reg_check_inactive
    assign illegal_reg_rv32e = 1'b0;
  end

`line 228 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
   
   
  always_comb begin : csr_operand_check
    csr_op_o = csr_op;

`line 234 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
     
    if ((csr_op == CSR_OP_SET || csr_op == CSR_OP_CLEAR) &&
        instr_rs1 == '0) begin
      csr_op_o = CSR_OP_READ;
    end
  end

`line 242 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
   
   

`line 246 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
  always_comb begin
    jump_in_dec_o         = 1'b0;
    jump_set_o            = 1'b0;
    branch_in_dec_o       = 1'b0;
    icache_inval_o        = 1'b0;

`line 252 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    multdiv_operator_o    = MD_OP_MULL;
    multdiv_signed_mode_o = 2'b00;

`line 255 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    rf_wdata_sel_o        = RF_WD_EX;
    rf_we                 = 1'b0;
    rf_ren_a_o            = 1'b0;
    rf_ren_b_o            = 1'b0;

`line 260 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    csr_access_o          = 1'b0;
    csr_illegal           = 1'b0;
    csr_op                = CSR_OP_READ;

`line 264 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    data_we_o             = 1'b0;
    data_type_o           = 2'b00;
    data_sign_extension_o = 1'b0;
    data_req_o            = 1'b0;

`line 269 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    illegal_insn          = 1'b0;
    ebrk_insn_o           = 1'b0;
    mret_insn_o           = 1'b0;
    dret_insn_o           = 1'b0;
    ecall_insn_o          = 1'b0;
    wfi_insn_o            = 1'b0;

`line 276 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
    fp_rf_we_o            = 1'b0;
    is_fp_instr_o         = 1'b0;
    use_fp_rs1_o          = 1'b0;
    use_fp_rs2_o          = 1'b0;
    use_fp_rs3_o          = 1'b0;
    use_fp_rd_o           = 1'b0;
    fp_load_o             = 1'b0;
    fp_src_fmt_o          = FP32;
    fp_dst_fmt_o          = FP32;
    fp_swap_oprnds_o      = 1'b0;
    mv_instn_xw_o         = 1'b0;
    mv_instn_wx_o         = 1'b0;
    fpu_to_int_rf_o       = 1'b0;
    fp_rf_ren_a_o         = 1'b0;
    fp_rf_ren_b_o         = 1'b0;
    fp_rf_ren_c_o         = 1'b0;
    fflags_en_id_o        = 1'b0;

`line 295 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    opcode                = opcode_e'(instr[6:0]);

`line 297 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    unique case (opcode)

`line 299 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
       
       
       

`line 303 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_JAL: begin    
        jump_in_dec_o      = 1'b1;

`line 306 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        if (instr_first_cycle_i) begin
           
          rf_we            = BranchTargetALU;
          jump_set_o       = 1'b1;
        end else begin
           
          rf_we            = 1'b1;
        end
      end

`line 316 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_JALR: begin   
        jump_in_dec_o      = 1'b1;

`line 319 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        if (instr_first_cycle_i) begin
           
          rf_we            = BranchTargetALU;
          jump_set_o       = 1'b1;
        end else begin
           
          rf_we            = 1'b1;
        end
        if (instr[14:12] != 3'b0) begin
          illegal_insn = 1'b1;
        end

`line 331 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        rf_ren_a_o = 1'b1;
      end

`line 334 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_BRANCH: begin  
        branch_in_dec_o       = 1'b1;
         
        unique case (instr[14:12])
          3'b000,
          3'b001,
          3'b100,
          3'b101,
          3'b110,
          3'b111:  illegal_insn = 1'b0;
          default: illegal_insn = 1'b1;
        endcase

`line 347 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        rf_ren_a_o = 1'b1;
        rf_ren_b_o = 1'b1;
      end

`line 351 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
       
       
       

`line 355 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_STORE: begin
        rf_ren_a_o         = 1'b1;
        rf_ren_b_o         = 1'b1;
        data_req_o         = 1'b1;
        data_we_o          = 1'b1;

`line 361 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        if (instr[14]) begin
          illegal_insn = 1'b1;
        end

`line 365 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
         
        unique case (instr[13:12])
          2'b00:   data_type_o  = 2'b10;  
          2'b01:   data_type_o  = 2'b01;  
          2'b10:   data_type_o  = 2'b00;  
          default: illegal_insn = 1'b1;
        endcase
      end

`line 374 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_LOAD: begin
        rf_ren_a_o          = 1'b1;
        data_req_o          = 1'b1;
        data_type_o         = 2'b00;

`line 379 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
         
        data_sign_extension_o = ~instr[14];

`line 382 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
         
        unique case (instr[13:12])
          2'b00: data_type_o = 2'b10;  
          2'b01: data_type_o = 2'b01;  
          2'b10: begin
            data_type_o = 2'b00;       
            if (instr[14]) begin
              illegal_insn = 1'b1;     
            end
          end
          default: begin
            illegal_insn = 1'b1;
          end
        endcase
      end

`line 398 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
       
       
       

`line 402 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_LUI: begin   
        rf_we            = 1'b1;
      end

`line 406 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_AUIPC: begin   
        rf_we            = 1'b1;
      end

`line 410 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_OP_IMM: begin  
        rf_ren_a_o       = 1'b1;
        rf_we            = 1'b1;

`line 414 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        unique case (instr[14:12])
          3'b000,
          3'b010,
          3'b011,
          3'b100,
          3'b110,
          3'b111: illegal_insn = 1'b0;

`line 422 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
          3'b001: begin
            unique case (instr[31:27])
              5'b0_0000: illegal_insn = (instr[26:25] == 2'b00) ? 1'b0 : 1'b1;         
              5'b0_0100,                                                               
              5'b0_1001,                                                               
              5'b0_0101,                                                               
              5'b0_1101: illegal_insn = (RV32B != RV32BNone) ? 1'b0 : 1'b1;            
              5'b0_0001: if (instr[26] == 1'b0) begin
                illegal_insn = (RV32B == RV32BFull) ? 1'b0 : 1'b1;                     
              end else begin
                illegal_insn = 1'b1;
              end
              5'b0_1100: begin
                unique case(instr[26:20])
                  7'b000_0000,                                                          
                  7'b000_0001,                                                          
                  7'b000_0010,                                                          
                  7'b000_0100,                                                          
                  7'b000_0101: illegal_insn = (RV32B != RV32BNone) ? 1'b0 : 1'b1;       
                  7'b001_0000,                                                          
                  7'b001_0001,                                                          
                  7'b001_0010,                                                          
                  7'b001_1000,                                                          
                  7'b001_1001,                                                          
                  7'b001_1010: illegal_insn = (RV32B == RV32BFull) ? 1'b0 : 1'b1;       

`line 448 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
                  default: illegal_insn = 1'b1;
                endcase
              end
              default : illegal_insn = 1'b1;
            endcase
          end

`line 455 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
          3'b101: begin
            if (instr[26]) begin
              illegal_insn = (RV32B != RV32BNone) ? 1'b0 : 1'b1;                        
            end else begin
              unique case (instr[31:27])
                5'b0_0000,                                                              
                5'b0_1000: illegal_insn = (instr[26:25] == 2'b00) ? 1'b0 : 1'b1;        

`line 463 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
                5'b0_0100,                                                              
                5'b0_1100,                                                              
                5'b0_1001: illegal_insn = (RV32B != RV32BNone) ? 1'b0 : 1'b1;           

`line 467 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
                5'b0_1101: begin
                  if ((RV32B == RV32BFull)) begin
                    illegal_insn = 1'b0;                                                
                  end else begin
                    unique case (instr[24:20])
                      5'b11111,                                                         
                      5'b11000: illegal_insn = (RV32B == RV32BBalanced) ? 1'b0 : 1'b1;  

`line 475 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
                      default: illegal_insn = 1'b1;
                    endcase
                  end
                end
                5'b0_0101: begin
                  if ((RV32B == RV32BFull)) begin
                    illegal_insn = 1'b0;                                               
                  end else if (instr[24:20] == 5'b00111) begin
                    illegal_insn = (RV32B == RV32BBalanced) ? 1'b0 : 1'b1;             
                  end
                end
                5'b0_0001: begin
                  if (instr[26] == 1'b0) begin
                    illegal_insn = (RV32B == RV32BFull) ? 1'b0 : 1'b1;                 
                  end else begin
                    illegal_insn = 1'b1;
                  end
                end

`line 494 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
                default: illegal_insn = 1'b1;
              endcase
            end
          end

`line 499 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
          default: illegal_insn = 1'b1;
        endcase
      end

`line 503 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_OP: begin   
        rf_ren_a_o      = 1'b1;
        rf_ren_b_o      = 1'b1;
        rf_we           = 1'b1;
        if ({instr[26], instr[13:12]} == {1'b1, 2'b01}) begin
          illegal_insn = (RV32B != RV32BNone) ? 1'b0 : 1'b1;  
        end else begin
          unique case ({instr[31:25], instr[14:12]})
             
            {7'b000_0000, 3'b000},
            {7'b010_0000, 3'b000},
            {7'b000_0000, 3'b010},
            {7'b000_0000, 3'b011},
            {7'b000_0000, 3'b100},
            {7'b000_0000, 3'b110},
            {7'b000_0000, 3'b111},
            {7'b000_0000, 3'b001},
            {7'b000_0000, 3'b101},
            {7'b010_0000, 3'b101}: illegal_insn = 1'b0;

`line 523 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
             
            {7'b010_0000, 3'b111},  
            {7'b010_0000, 3'b110},  
            {7'b010_0000, 3'b100},  
            {7'b001_0000, 3'b001},  
            {7'b001_0000, 3'b101},  
            {7'b011_0000, 3'b001},  
            {7'b011_0000, 3'b101},  
            {7'b000_0101, 3'b100},  
            {7'b000_0101, 3'b101},  
            {7'b000_0101, 3'b110},  
            {7'b000_0101, 3'b111},  
            {7'b000_0100, 3'b100},  
            {7'b010_0100, 3'b100},  
            {7'b000_0100, 3'b111},  
             
            {7'b010_0100, 3'b001},  
            {7'b001_0100, 3'b001},  
            {7'b011_0100, 3'b001},  
            {7'b010_0100, 3'b101},  
             
            {7'b010_0100, 3'b111}: illegal_insn = (RV32B != RV32BNone) ? 1'b0 : 1'b1;  
             
            {7'b010_0100, 3'b110},  
            {7'b000_0100, 3'b110},  
             
            {7'b011_0100, 3'b101},  
            {7'b001_0100, 3'b101},  
            {7'b000_0100, 3'b001},  
            {7'b000_0100, 3'b101},  
             
            {7'b000_0101, 3'b001},  
            {7'b000_0101, 3'b010},  
            {7'b000_0101, 3'b011}: illegal_insn = (RV32B == RV32BFull) ? 1'b0 : 1'b1;  

`line 558 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
             
            {7'b000_0001, 3'b000}: begin  
              multdiv_operator_o    = MD_OP_MULL;
              multdiv_signed_mode_o = 2'b00;
              illegal_insn          = (RV32M == RV32MNone) ? 1'b1 : 1'b0;
            end
            {7'b000_0001, 3'b001}: begin  
              multdiv_operator_o    = MD_OP_MULH;
              multdiv_signed_mode_o = 2'b11;
              illegal_insn          = (RV32M == RV32MNone) ? 1'b1 : 1'b0;
            end
            {7'b000_0001, 3'b010}: begin  
              multdiv_operator_o    = MD_OP_MULH;
              multdiv_signed_mode_o = 2'b01;
              illegal_insn          = (RV32M == RV32MNone) ? 1'b1 : 1'b0;
            end
            {7'b000_0001, 3'b011}: begin  
              multdiv_operator_o    = MD_OP_MULH;
              multdiv_signed_mode_o = 2'b00;
              illegal_insn          = (RV32M == RV32MNone) ? 1'b1 : 1'b0;
            end
            {7'b000_0001, 3'b100}: begin  
              multdiv_operator_o    = MD_OP_DIV;
              multdiv_signed_mode_o = 2'b11;
              illegal_insn          = (RV32M == RV32MNone) ? 1'b1 : 1'b0;
            end
            {7'b000_0001, 3'b101}: begin  
              multdiv_operator_o    = MD_OP_DIV;
              multdiv_signed_mode_o = 2'b00;
              illegal_insn          = (RV32M == RV32MNone) ? 1'b1 : 1'b0;
            end
            {7'b000_0001, 3'b110}: begin  
              multdiv_operator_o    = MD_OP_REM;
              multdiv_signed_mode_o = 2'b11;
              illegal_insn          = (RV32M == RV32MNone) ? 1'b1 : 1'b0;
            end
            {7'b000_0001, 3'b111}: begin  
              multdiv_operator_o    = MD_OP_REM;
              multdiv_signed_mode_o = 2'b00;
              illegal_insn          = (RV32M == RV32MNone) ? 1'b1 : 1'b0;
            end
            default: begin
              illegal_insn = 1'b1;
            end
          endcase
        end
      end

`line 606 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
       
       
       

`line 610 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_MISC_MEM: begin
        unique case (instr[14:12])
          3'b000: begin
             
            rf_we           = 1'b0;
          end
          3'b001: begin
             
             
             
             
            jump_in_dec_o   = 1'b1;

`line 623 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            rf_we           = 1'b0;

`line 625 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            if (instr_first_cycle_i) begin
              jump_set_o       = 1'b1;
              icache_inval_o   = 1'b1;
            end
          end
          default: begin
            illegal_insn       = 1'b1;
          end
        endcase
      end

`line 636 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_SYSTEM: begin
        if (instr[14:12] == 3'b000) begin
           
          unique case (instr[31:20])
            12'h000:   
               
              ecall_insn_o = 1'b1;

`line 644 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            12'h001:   
               
              ebrk_insn_o = 1'b1;

`line 648 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            12'h302:   
              mret_insn_o = 1'b1;

`line 651 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            12'h7b2:   
              dret_insn_o = 1'b1;

`line 654 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            12'h105:   
              wfi_insn_o = 1'b1;

`line 657 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            default:
              illegal_insn = 1'b1;
          endcase

`line 661 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
           
          if (instr_rs1 != 5'b0 || instr_rd != 5'b0) begin
            illegal_insn = 1'b1;
          end
        end else begin
           
          csr_access_o     = 1'b1;
          rf_wdata_sel_o   = RF_WD_CSR;
          rf_we            = 1'b1;

`line 671 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
          if (~instr[14]) begin
            rf_ren_a_o         = 1'b1;
          end

`line 675 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
          unique case (instr[13:12])
            2'b01:   csr_op = CSR_OP_WRITE;
            2'b10:   csr_op = CSR_OP_SET;
            2'b11:   csr_op = CSR_OP_CLEAR;
            default: csr_illegal = 1'b1;
          endcase

`line 682 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
          illegal_insn = csr_illegal;
        end

`line 685 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      end

`line 687 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
       
       
       

`line 691 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_STORE_FP: begin
        data_req_o         = 1'b1;
        data_we_o          = 1'b1;
        data_type_o        = 2'b00;
        rf_ren_a_o         = 1'b1;
        fp_rf_ren_b_o      = 1'b1;
        is_fp_instr_o      = 1'b1;

`line 699 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        use_fp_rs2_o       = 1'b1;

`line 701 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        unique case(instr[14:12])
          3'b011: begin  
            illegal_insn = (RVF == RV32DDouble) ? 1'b0 : 1'b1;
            fp_src_fmt_o = FP64;
          end
          3'b010: begin  
            illegal_insn = (RVF == RV32FDNone) ? 1'b1 : 1'b0;
            fp_src_fmt_o = FP32;
          end
          default: illegal_insn = 1'b1;
        endcase
        end

`line 714 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_LOAD_FP: begin
        data_req_o         = 1'b1;
        data_type_o        = 2'b00;
        fp_load_o          = 1'b1;
        rf_ren_a_o         = 1'b1;
        fp_rf_ren_b_o      = 1'b1;

`line 721 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        use_fp_rd_o        = 1'b1;

`line 723 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        unique case(instr[14:12])
          3'b011: begin  
            illegal_insn = (RVF == RV32DDouble) ? 1'b0 : 1'b1;
            fp_src_fmt_o = FP64;
          end
          3'b010: begin  
            illegal_insn = (RVF == RV32FDNone) ? 1'b1 : 1'b0;
            fp_src_fmt_o = FP32;
          end
          default: illegal_insn = 1'b1;
        endcase
      end

`line 736 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_MADD_FP,   
      OPCODE_MSUB_FP,   
      OPCODE_NMSUB_FP,  
      OPCODE_NMADD_FP: begin  
        fp_rf_we_o         = 1'b1;
        fp_src_fmt_o       = FP32;
        is_fp_instr_o      = 1'b1;
        fp_rf_ren_a_o      = 1'b1;
        fp_rf_ren_b_o      = 1'b1;
        fp_rf_ren_c_o      = 1'b1;

`line 747 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        use_fp_rs1_o       = 1'b1;
        use_fp_rs2_o       = 1'b1;
        use_fp_rs3_o       = 1'b1;
        use_fp_rd_o        = 1'b1;
        fflags_en_id_o     = 1'b1;

`line 753 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        unique case (instr[26:25])
          01: begin
            illegal_insn = ((RVF == RV32DDouble) & (fp_invalid_rm)) ? 1'b0 : 1'b1;
            fp_src_fmt_o = FP64;
          end
          00: begin
            illegal_insn = ((RVF == RV32FDNone) & (~fp_invalid_rm)) ? 1'b1 : 1'b0;
            fp_src_fmt_o = FP32;
          end
          default: illegal_insn = 1'b1;
        endcase
      end

`line 766 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_OP_FP: begin
        fp_src_fmt_o       = FP32;
        is_fp_instr_o      = 1'b1;
        fflags_en_id_o     = 1'b1;

`line 771 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        unique case (instr[31:25])
          7'b0000001,        
          7'b0000101: begin  
            fp_rf_ren_a_o      = 1'b1;
            fp_rf_ren_b_o      = 1'b1;
            fp_rf_we_o         = 1'b1;
            use_fp_rs1_o       = 1'b1;
            use_fp_rs2_o       = 1'b1;
            use_fp_rd_o        = 1'b1;
            fp_swap_oprnds_o   = 1'b1;
            illegal_insn = ((RVF == RV32DDouble) & (fp_invalid_rm)) ? 1'b0 : 1'b1;
            fp_src_fmt_o = FP64;
          end
          7'b0001001,       
          7'b0001101:begin  
            fp_rf_ren_a_o      = 1'b1;
            fp_rf_ren_b_o      = 1'b1;
            fp_rf_we_o         = 1'b1;
            use_fp_rs1_o       = 1'b1;
            use_fp_rs2_o       = 1'b1;
            use_fp_rd_o        = 1'b1;
            illegal_insn = ((RVF == RV32DDouble) & (fp_invalid_rm)) ? 1'b0 : 1'b1;
            fp_src_fmt_o = FP64;
          end
          7'b0000000,        
          7'b0000100: begin  
            fp_rf_ren_a_o      = 1'b1;
            fp_rf_ren_b_o      = 1'b1;
            fp_rf_we_o         = 1'b1;
            use_fp_rs1_o       = 1'b1;
            use_fp_rs2_o       = 1'b1;
            use_fp_rd_o        = 1'b1;
            fp_swap_oprnds_o   = 1'b1;
            illegal_insn = ((RVF == RV32FDNone) & (~fp_invalid_rm)) ? 1'b1 : 1'b0;
            fp_src_fmt_o = FP32;
          end
          7'b0001000,        
          7'b0001100: begin  
            fp_rf_ren_a_o      = 1'b1;
            fp_rf_ren_b_o      = 1'b1;
            fp_rf_we_o         = 1'b1;
            use_fp_rs1_o       = 1'b1;
            use_fp_rs2_o       = 1'b1;
            use_fp_rd_o        = 1'b1;
            illegal_insn = ((RVF == RV32FDNone) & (~fp_invalid_rm)) ? 1'b1 : 1'b0;
            fp_src_fmt_o = FP32;
          end
          7'b0101101: begin
            fp_rf_we_o         = 1'b1;
            use_fp_rs1_o       = 1'b1;
            use_fp_rd_o        = 1'b1;
            fp_rf_ren_a_o      = 1'b1;
            if (~|instr[24:20]) begin  
              illegal_insn = ((RVF == RV32DDouble) & (fp_invalid_rm)) ? 1'b0 : 1'b1;
              fp_src_fmt_o = FP64;
            end
          end
          7'b0101100: begin  
            fp_rf_we_o         = 1'b1;
            use_fp_rs1_o       = 1'b1;
            use_fp_rd_o        = 1'b1;
            fp_rf_ren_a_o      = 1'b1;
            fpu_to_int_rf_o    = 1'b1;
            if (~|instr[24:20]) begin
              illegal_insn = ((RVF == RV32FDNone) & (~fp_invalid_rm)) ? 1'b1 : 1'b0;
              fp_src_fmt_o = FP32;
            end
          end
          7'b0010001: begin  
            fp_rf_we_o         = 1'b1;
            use_fp_rs1_o       = 1'b1;
            use_fp_rs2_o       = 1'b1;
            use_fp_rd_o        = 1'b1;
            fp_rf_ren_a_o      = 1'b1;
            fp_rf_ren_b_o      = 1'b1;
            if (~(instr[14] | (&instr[13:12]))) begin
              illegal_insn  = ((RVF == RV32DDouble) & (fp_invalid_rm)) ? 1'b0 : 1'b1;
              fp_src_fmt_o  = FP64;
            end
          end
          7'b0010000: begin  
            fp_rf_we_o         = 1'b1;
            use_fp_rs1_o       = 1'b1;
            use_fp_rs2_o       = 1'b1;
            use_fp_rd_o        = 1'b1;
            fp_rf_ren_a_o      = 1'b1;
            fp_rf_ren_b_o      = 1'b1;
            if (~(instr[14] | (&instr[13:12]))) begin
              illegal_insn  = ((RVF == RV32FDNone) & (~fp_invalid_rm)) ? 1'b1 : 1'b0;
              fp_src_fmt_o  = FP32;
            end
          end
          7'b0010101: begin  
            fp_rf_we_o         = 1'b1;
            use_fp_rs1_o       = 1'b1;
            use_fp_rs2_o       = 1'b1;
            use_fp_rd_o        = 1'b1;
            fp_rf_ren_a_o      = 1'b1;
            fp_rf_ren_b_o      = 1'b1;
            if (~|instr[14:13]) begin
              illegal_insn  = ((RVF == RV32DDouble) & (fp_invalid_rm)) ? 1'b0 : 1'b1;
              fp_src_fmt_o  = FP64;
            end
          end
          7'b0010100: begin  
            fp_rf_we_o         = 1'b1;
            use_fp_rs1_o       = 1'b1;
            use_fp_rs2_o       = 1'b1;
            use_fp_rd_o        = 1'b1;
            fp_rf_ren_a_o      = 1'b1;
            fp_rf_ren_b_o      = 1'b1;
            if (~|instr[14:13]) begin
              illegal_insn  = ((RVF == RV32FDNone) & (~fp_invalid_rm)) ? 1'b1 : 1'b0;
              fp_src_fmt_o  = FP32;
            end
          end
          7'b0100000: begin  
            fp_rf_we_o         = 1'b1;
            use_fp_rs1_o       = 1'b1;
            use_fp_rd_o        = 1'b1;
            fp_rf_ren_a_o      = 1'b1;
            if (~(|instr[24:21] | (~instr[20]))) begin
              illegal_insn = ((RVF == RV32DDouble) & (fp_invalid_rm)) ? 1'b0 : 1'b1;
              fp_src_fmt_o = FP64;
            end
          end
          7'b1100000: begin  
            rf_we            = 1'b1;   
            use_fp_rs1_o     = 1'b1;
            fp_rf_ren_a_o    = 1'b1;
            fpu_to_int_rf_o  = 1'b1;
            if (~|instr[24:21]) begin
              illegal_insn = ((RVF == RV32FDNone) & (~fp_invalid_rm)) ? 1'b1 : 1'b0;
              fp_src_fmt_o = FP32;
            end
          end
          7'b0100001: begin  
            fp_rf_we_o         = 1'b1;
            use_fp_rs1_o       = 1'b1;
            use_fp_rd_o        = 1'b1;
            fp_rf_ren_a_o      = 1'b1;
            if (~|instr[24:20]) begin
              illegal_insn = ((RVF == RV32DDouble) & (fp_invalid_rm)) ? 1'b0 : 1'b1;
              fp_src_fmt_o = FP64;
            end
          end
          7'b1110000: begin  
            rf_we            = 1'b1;   
            fp_rf_ren_a_o    = 1'b1;
            fpu_to_int_rf_o  = 1'b1;
            unique case ({instr[24:20],instr[14:12]})
              {5'b00000,3'b000}: begin
                use_fp_rs1_o   = 1'b1;
                illegal_insn   = ((RVF == RV32FDNone) & (~fp_invalid_rm)) ? 1'b1 : 1'b0;
                fp_src_fmt_o   = FP32;
                mv_instn_xw_o  = 1'b1;
                fflags_en_id_o = 1'b0;
              end
              {5'b00000,3'b001}: begin
                use_fp_rs1_o = 1'b1;
                illegal_insn = ((RVF == RV32FDNone) & (~fp_invalid_rm)) ? 1'b1 : 1'b0;
                fp_src_fmt_o = FP32;
              end
              default: begin
                illegal_insn =1'b1;
              end
            endcase
          end
          7'b1010001: begin  
            rf_we            = 1'b1;   
            use_fp_rs1_o     = 1'b1;
            use_fp_rs2_o     = 1'b1;
            fp_rf_ren_a_o    = 1'b1;
            fp_rf_ren_b_o    = 1'b1;
            if (~(instr[14]) | (&instr[13:12])) begin
              illegal_insn = ((RVF == RV32DDouble) & (fp_invalid_rm)) ? 1'b0 : 1'b1;
              fp_src_fmt_o = FP64;
            end
          end
          7'b1010000: begin  
            rf_we            = 1'b1;   
            use_fp_rs1_o     = 1'b1;
            use_fp_rs2_o     = 1'b1;
            fp_rf_ren_a_o    = 1'b1;
            fp_rf_ren_b_o    = 1'b1;
            fpu_to_int_rf_o  = 1'b1;
            if (~(instr[14]) | (&instr[13:12])) begin
              illegal_insn = ((RVF == RV32FDNone) & (~fp_invalid_rm)) ? 1'b1 : 1'b0;
              fp_src_fmt_o = FP32;
            end
          end
          7'b1110001: begin  
            rf_we            = 1'b1;   
            use_fp_rs1_o     = 1'b1;
            fp_rf_ren_a_o    = 1'b1;
            unique case ({instr[24:20],instr[14:12]})
              {5'b00000,3'b001}: begin
                illegal_insn = ((RVF == RV32DDouble) & (fp_invalid_rm)) ? 1'b0 : 1'b1;
                fp_src_fmt_o = FP64;
              end
              default: begin
                illegal_insn =1'b1;
              end
            endcase
          end
          7'b1100001: begin  
            rf_we            = 1'b1;   
            use_fp_rs1_o     = 1'b1;
            fp_rf_ren_a_o    = 1'b1;
            if (~|instr[24:21]) begin
              illegal_insn = ((RVF == RV32DDouble) & (fp_invalid_rm)) ? 1'b0 : 1'b1;
              fp_src_fmt_o = FP64;
            end
          end
          7'b1101000: begin  
            fp_rf_we_o       = 1'b1;
            use_fp_rd_o      = 1'b1;
            fp_rf_ren_a_o    = 1'b1;
            if (~|instr[24:21]) begin
              illegal_insn = ((RVF == RV32FDNone) & (~fp_invalid_rm)) ? 1'b1 : 1'b0;
              fp_src_fmt_o = FP32;
            end
          end
          7'b1111001: begin  
            rf_we            = 1'b1;   
            use_fp_rd_o      = 1'b1;
            fp_rf_ren_a_o    = 1'b1;
            if (~|instr[24:21]) begin
              illegal_insn = ((RVF == RV32DDouble) & (fp_invalid_rm)) ? 1'b0 : 1'b1;
              fp_src_fmt_o = FP64;
            end
          end
          7'b1111000: begin  
            fp_rf_we_o        = 1'b1;
            use_fp_rd_o       = 1'b1;
            mv_instn_wx_o     = 1'b1;
            fp_rf_ren_a_o     = 1'b1;
            rf_ren_a_o        = 1'b1;
            if (~(|instr[24:20]) | (|instr[14:12])) begin
              illegal_insn = ((RVF == RV32FDNone) & (~fp_invalid_rm)) ? 1'b1 : 1'b0;
              fp_src_fmt_o = FP32;
              fflags_en_id_o = 1'b0;
            end
          end
          default: illegal_insn = 1'b1;
        endcase
      end
    default: begin
      illegal_insn = 1'b1;
    end
    endcase

`line 1023 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
    if (illegal_c_insn_i) begin
      illegal_insn = 1'b1;
    end

`line 1028 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
     
     
     
     
     
    if (illegal_insn) begin
      rf_we           = 1'b0;
      data_req_o      = 1'b0;
      data_we_o       = 1'b0;
      jump_in_dec_o   = 1'b0;
      jump_set_o      = 1'b0;
      branch_in_dec_o = 1'b0;
      csr_access_o    = 1'b0;

`line 1042 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
       
      fp_rf_we_o      = 1'b0;
    end
  end

`line 1047 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
   
   

`line 1051 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
  always_comb begin
    alu_operator_o     = ALU_SLTU;
    alu_op_a_mux_sel_o = OP_A_IMM;
    alu_op_b_mux_sel_o = OP_B_IMM;

`line 1056 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    imm_a_mux_sel_o    = IMM_A_ZERO;
    imm_b_mux_sel_o    = IMM_B_I;

`line 1059 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    bt_a_mux_sel_o     = OP_A_CURRPC;
    bt_b_mux_sel_o     = IMM_B_I;


`line 1063 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    opcode_alu         = opcode_e'(instr_alu[6:0]);

`line 1065 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    use_rs3_d          = 1'b0;
    alu_multicycle_o   = 1'b0;
    mult_sel_o         = 1'b0;
    div_sel_o          = 1'b0;

`line 1070 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    fp_alu_op_mod_o       = 1'b0;
    fp_alu_operator_o     = FMADD;

`line 1073 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
    unique case (opcode_alu)

`line 1075 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
       
       
       

`line 1079 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_JAL: begin  
        if (BranchTargetALU) begin
          bt_a_mux_sel_o = OP_A_CURRPC;
          bt_b_mux_sel_o = IMM_B_J;
        end

`line 1085 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
         
        if (instr_first_cycle_i && !BranchTargetALU) begin
           
          alu_op_a_mux_sel_o  = OP_A_CURRPC;
          alu_op_b_mux_sel_o  = OP_B_IMM;
          imm_b_mux_sel_o     = IMM_B_J;
          alu_operator_o      = ALU_ADD;
        end else begin
           
          alu_op_a_mux_sel_o  = OP_A_CURRPC;
          alu_op_b_mux_sel_o  = OP_B_IMM;
          imm_b_mux_sel_o     = IMM_B_INCR_PC;
          alu_operator_o      = ALU_ADD;
        end
      end

`line 1101 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_JALR: begin  
        if (BranchTargetALU) begin
          bt_a_mux_sel_o = OP_A_REG_A;
          bt_b_mux_sel_o = IMM_B_I;
        end

`line 1107 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
         
        if (instr_first_cycle_i && !BranchTargetALU) begin
           
          alu_op_a_mux_sel_o  = OP_A_REG_A;
          alu_op_b_mux_sel_o  = OP_B_IMM;
          imm_b_mux_sel_o     = IMM_B_I;
          alu_operator_o      = ALU_ADD;
        end else begin
           
          alu_op_a_mux_sel_o  = OP_A_CURRPC;
          alu_op_b_mux_sel_o  = OP_B_IMM;
          imm_b_mux_sel_o     = IMM_B_INCR_PC;
          alu_operator_o      = ALU_ADD;
        end
      end

`line 1123 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_BRANCH: begin  
         
        unique case (instr_alu[14:12])
          3'b000:  alu_operator_o = ALU_EQ;
          3'b001:  alu_operator_o = ALU_NE;
          3'b100:  alu_operator_o = ALU_LT;
          3'b101:  alu_operator_o = ALU_GE;
          3'b110:  alu_operator_o = ALU_LTU;
          3'b111:  alu_operator_o = ALU_GEU;
          default: ;
        endcase

`line 1135 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        if (BranchTargetALU) begin
          bt_a_mux_sel_o = OP_A_CURRPC;
           
          bt_b_mux_sel_o = branch_taken_i ? IMM_B_B : IMM_B_INCR_PC;
        end

`line 1141 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
         
         
        if (instr_first_cycle_i) begin
           
          alu_op_a_mux_sel_o  = OP_A_REG_A;
          alu_op_b_mux_sel_o  = OP_B_REG_B;
        end else begin
           
          alu_op_a_mux_sel_o  = OP_A_CURRPC;
          alu_op_b_mux_sel_o  = OP_B_IMM;
           
          imm_b_mux_sel_o     = branch_taken_i ? IMM_B_B : IMM_B_INCR_PC;
          alu_operator_o      = ALU_ADD;
        end
      end

`line 1157 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
       
       
       

`line 1161 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_STORE: begin
        alu_op_a_mux_sel_o = OP_A_REG_A;
        alu_op_b_mux_sel_o = OP_B_REG_B;
        alu_operator_o     = ALU_ADD;

`line 1166 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        if (!instr_alu[14]) begin
           
          imm_b_mux_sel_o     = IMM_B_S;
          alu_op_b_mux_sel_o  = OP_B_IMM;
        end
      end

`line 1173 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_LOAD: begin
        alu_op_a_mux_sel_o  = OP_A_REG_A;

`line 1176 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
         
        alu_operator_o      = ALU_ADD;
        alu_op_b_mux_sel_o  = OP_B_IMM;
        imm_b_mux_sel_o     = IMM_B_I;
      end

`line 1182 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
       
       
       

`line 1186 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_LUI: begin   
        alu_op_a_mux_sel_o  = OP_A_IMM;
        alu_op_b_mux_sel_o  = OP_B_IMM;
        imm_a_mux_sel_o     = IMM_A_ZERO;
        imm_b_mux_sel_o     = IMM_B_U;
        alu_operator_o      = ALU_ADD;
      end

`line 1194 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_AUIPC: begin   
        alu_op_a_mux_sel_o  = OP_A_CURRPC;
        alu_op_b_mux_sel_o  = OP_B_IMM;
        imm_b_mux_sel_o     = IMM_B_U;
        alu_operator_o      = ALU_ADD;
      end

`line 1201 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_OP_IMM: begin  
        alu_op_a_mux_sel_o  = OP_A_REG_A;
        alu_op_b_mux_sel_o  = OP_B_IMM;
        imm_b_mux_sel_o     = IMM_B_I;

`line 1206 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        unique case (instr_alu[14:12])
          3'b000: alu_operator_o = ALU_ADD;   
          3'b010: alu_operator_o = ALU_SLT;   
          3'b011: alu_operator_o = ALU_SLTU;  
          3'b100: alu_operator_o = ALU_XOR;   
          3'b110: alu_operator_o = ALU_OR;    
          3'b111: alu_operator_o = ALU_AND;   

`line 1214 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
          3'b001: begin
            if (RV32B != RV32BNone) begin
              unique case (instr_alu[31:27])
                5'b0_0000: alu_operator_o = ALU_SLL;     
                5'b0_0100: alu_operator_o = ALU_SLO;     
                5'b0_1001: alu_operator_o = ALU_SBCLR;   
                5'b0_0101: alu_operator_o = ALU_SBSET;   
                5'b0_1101: alu_operator_o = ALU_SBINV;   
                 
                5'b0_0001: if (instr_alu[26] == 0) alu_operator_o = ALU_SHFL;
                5'b0_1100: begin
                  unique case (instr_alu[26:20])
                    7'b000_0000: alu_operator_o = ALU_CLZ;    
                    7'b000_0001: alu_operator_o = ALU_CTZ;    
                    7'b000_0010: alu_operator_o = ALU_PCNT;   
                    7'b000_0100: alu_operator_o = ALU_SEXTB;  
                    7'b000_0101: alu_operator_o = ALU_SEXTH;  
                    7'b001_0000: begin
                      if (RV32B == RV32BFull) begin
                        alu_operator_o = ALU_CRC32_B;   
                        alu_multicycle_o = 1'b1;
                      end
                    end
                    7'b001_0001: begin
                      if (RV32B == RV32BFull) begin
                        alu_operator_o = ALU_CRC32_H;   
                        alu_multicycle_o = 1'b1;
                      end
                    end
                    7'b001_0010: begin
                      if (RV32B == RV32BFull) begin
                        alu_operator_o = ALU_CRC32_W;   
                        alu_multicycle_o = 1'b1;
                      end
                    end
                    7'b001_1000: begin
                      if (RV32B == RV32BFull) begin
                        alu_operator_o = ALU_CRC32C_B;  
                        alu_multicycle_o = 1'b1;
                      end
                    end
                    7'b001_1001: begin
                      if (RV32B == RV32BFull) begin
                        alu_operator_o = ALU_CRC32C_H;  
                        alu_multicycle_o = 1'b1;
                      end
                    end
                    7'b001_1010: begin
                      if (RV32B == RV32BFull) begin
                        alu_operator_o = ALU_CRC32C_W;  
                        alu_multicycle_o = 1'b1;
                      end
                    end
                    default: ;
                  endcase
                end

`line 1271 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
                default: ;
              endcase
            end else begin
              alu_operator_o = ALU_SLL;  
            end
          end

`line 1278 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
          3'b101: begin
            if (RV32B != RV32BNone) begin
              if (instr_alu[26] == 1'b1) begin
                alu_operator_o = ALU_FSR;
                alu_multicycle_o = 1'b1;
                if (instr_first_cycle_i) begin
                  use_rs3_d = 1'b1;
                end else begin
                  use_rs3_d = 1'b0;
                end
              end else begin
                unique case (instr_alu[31:27])
                  5'b0_0000: alu_operator_o = ALU_SRL;    
                  5'b0_1000: alu_operator_o = ALU_SRA;    
                  5'b0_0100: alu_operator_o = ALU_SRO;    
                  5'b0_1001: alu_operator_o = ALU_SBEXT;  
                  5'b0_1100: begin
                    alu_operator_o = ALU_ROR;             
                    alu_multicycle_o = 1'b1;
                  end
                  5'b0_1101: alu_operator_o = ALU_GREV;   
                  5'b0_0101: alu_operator_o = ALU_GORC;   
                   
                  5'b0_0001: begin
                    if (RV32B == RV32BFull) begin
                      if (instr_alu[26] == 1'b0) alu_operator_o = ALU_UNSHFL;
                    end
                  end
                  default: ;
                endcase
              end

`line 1310 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            end else begin
              if (instr_alu[31:27] == 5'b0_0000) begin
                alu_operator_o = ALU_SRL;                
              end else if (instr_alu[31:27] == 5'b0_1000) begin
                alu_operator_o = ALU_SRA;                
              end
            end
          end

`line 1319 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
          default: ;
        endcase
      end

`line 1323 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_OP: begin   
        alu_op_a_mux_sel_o = OP_A_REG_A;
        alu_op_b_mux_sel_o = OP_B_REG_B;

`line 1327 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        if (instr_alu[26]) begin
          if (RV32B != RV32BNone) begin
            unique case ({instr_alu[26:25], instr_alu[14:12]})
              {2'b11, 3'b001}: begin
                alu_operator_o   = ALU_CMIX;  
                alu_multicycle_o = 1'b1;
                if (instr_first_cycle_i) begin
                  use_rs3_d = 1'b1;
                end else begin
                  use_rs3_d = 1'b0;
                end
              end
              {2'b11, 3'b101}: begin
                alu_operator_o   = ALU_CMOV;  
                alu_multicycle_o = 1'b1;
                if (instr_first_cycle_i) begin
                  use_rs3_d = 1'b1;
                end else begin
                  use_rs3_d = 1'b0;
                end
              end
              {2'b10, 3'b001}: begin
                alu_operator_o   = ALU_FSL;   
                alu_multicycle_o = 1'b1;
                if (instr_first_cycle_i) begin
                  use_rs3_d = 1'b1;
                end else begin
                  use_rs3_d = 1'b0;
                end
              end
              {2'b10, 3'b101}: begin
                alu_operator_o   = ALU_FSR;   
                alu_multicycle_o = 1'b1;
                if (instr_first_cycle_i) begin
                  use_rs3_d = 1'b1;
                end else begin
                  use_rs3_d = 1'b0;
                end
              end
              default: ;
            endcase
          end
        end else begin
          unique case ({instr_alu[31:25], instr_alu[14:12]})
             
            {7'b000_0000, 3'b000}: alu_operator_o = ALU_ADD;    
            {7'b010_0000, 3'b000}: alu_operator_o = ALU_SUB;    
            {7'b000_0000, 3'b010}: alu_operator_o = ALU_SLT;    
            {7'b000_0000, 3'b011}: alu_operator_o = ALU_SLTU;   
            {7'b000_0000, 3'b100}: alu_operator_o = ALU_XOR;    
            {7'b000_0000, 3'b110}: alu_operator_o = ALU_OR;     
            {7'b000_0000, 3'b111}: alu_operator_o = ALU_AND;    
            {7'b000_0000, 3'b001}: alu_operator_o = ALU_SLL;    
            {7'b000_0000, 3'b101}: alu_operator_o = ALU_SRL;    
            {7'b010_0000, 3'b101}: alu_operator_o = ALU_SRA;    

`line 1383 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
             
            {7'b001_0000, 3'b001}: if (RV32B != RV32BNone) alu_operator_o = ALU_SLO;    
            {7'b001_0000, 3'b101}: if (RV32B != RV32BNone) alu_operator_o = ALU_SRO;    
            {7'b011_0000, 3'b001}: begin
              if (RV32B != RV32BNone) begin
                alu_operator_o = ALU_ROL;    
                alu_multicycle_o = 1'b1;
              end
            end
            {7'b011_0000, 3'b101}: begin
              if (RV32B != RV32BNone) begin
                alu_operator_o = ALU_ROR;    
                alu_multicycle_o = 1'b1;
              end
            end

`line 1399 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            {7'b000_0101, 3'b100}: if (RV32B != RV32BNone) alu_operator_o = ALU_MIN;     
            {7'b000_0101, 3'b101}: if (RV32B != RV32BNone) alu_operator_o = ALU_MAX;     
            {7'b000_0101, 3'b110}: if (RV32B != RV32BNone) alu_operator_o = ALU_MINU;    
            {7'b000_0101, 3'b111}: if (RV32B != RV32BNone) alu_operator_o = ALU_MAXU;    

`line 1404 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            {7'b000_0100, 3'b100}: if (RV32B != RV32BNone) alu_operator_o = ALU_PACK;    
            {7'b010_0100, 3'b100}: if (RV32B != RV32BNone) alu_operator_o = ALU_PACKU;   
            {7'b000_0100, 3'b111}: if (RV32B != RV32BNone) alu_operator_o = ALU_PACKH;   

`line 1408 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            {7'b010_0000, 3'b100}: if (RV32B != RV32BNone) alu_operator_o = ALU_XNOR;    
            {7'b010_0000, 3'b110}: if (RV32B != RV32BNone) alu_operator_o = ALU_ORN;     
            {7'b010_0000, 3'b111}: if (RV32B != RV32BNone) alu_operator_o = ALU_ANDN;    

`line 1412 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
             
            {7'b010_0100, 3'b001}: if (RV32B != RV32BNone) alu_operator_o = ALU_SBCLR;   
            {7'b001_0100, 3'b001}: if (RV32B != RV32BNone) alu_operator_o = ALU_SBSET;   
            {7'b011_0100, 3'b001}: if (RV32B != RV32BNone) alu_operator_o = ALU_SBINV;   
            {7'b010_0100, 3'b101}: if (RV32B != RV32BNone) alu_operator_o = ALU_SBEXT;   

`line 1418 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
             
            {7'b010_0100, 3'b111}: if (RV32B != RV32BNone) alu_operator_o = ALU_BFP;     

`line 1421 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
             
            {7'b011_0100, 3'b101}: if (RV32B != RV32BNone) alu_operator_o = ALU_GREV;    
            {7'b001_0100, 3'b101}: if (RV32B != RV32BNone) alu_operator_o = ALU_GORC;    
            {7'b000_0100, 3'b001}: if (RV32B == RV32BFull) alu_operator_o = ALU_SHFL;    
            {7'b000_0100, 3'b101}: if (RV32B == RV32BFull) alu_operator_o = ALU_UNSHFL;  

`line 1427 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
             
            {7'b000_0101, 3'b001}: if (RV32B == RV32BFull) alu_operator_o = ALU_CLMUL;   
            {7'b000_0101, 3'b010}: if (RV32B == RV32BFull) alu_operator_o = ALU_CLMULR;  
            {7'b000_0101, 3'b011}: if (RV32B == RV32BFull) alu_operator_o = ALU_CLMULH;  

`line 1432 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
             
            {7'b010_0100, 3'b110}: begin
              if (RV32B == RV32BFull) begin
                alu_operator_o = ALU_BDEP;    
                alu_multicycle_o = 1'b1;
              end
            end
            {7'b000_0100, 3'b110}: begin
              if (RV32B == RV32BFull) begin
                alu_operator_o = ALU_BEXT;    
                alu_multicycle_o = 1'b1;
              end
            end

`line 1446 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
             
            {7'b000_0001, 3'b000}: begin  
              alu_operator_o = ALU_ADD;
              mult_sel_o     = (RV32M == RV32MNone) ? 1'b0 : 1'b1;
            end
            {7'b000_0001, 3'b001}: begin  
              alu_operator_o = ALU_ADD;
              mult_sel_o     = (RV32M == RV32MNone) ? 1'b0 : 1'b1;
            end
            {7'b000_0001, 3'b010}: begin  
              alu_operator_o = ALU_ADD;
              mult_sel_o     = (RV32M == RV32MNone) ? 1'b0 : 1'b1;
            end
            {7'b000_0001, 3'b011}: begin  
              alu_operator_o = ALU_ADD;
              mult_sel_o     = (RV32M == RV32MNone) ? 1'b0 : 1'b1;
            end
            {7'b000_0001, 3'b100}: begin  
              alu_operator_o = ALU_ADD;
              div_sel_o      = (RV32M == RV32MNone) ? 1'b0 : 1'b1;
            end
            {7'b000_0001, 3'b101}: begin  
              alu_operator_o = ALU_ADD;
              div_sel_o      = (RV32M == RV32MNone) ? 1'b0 : 1'b1;
            end
            {7'b000_0001, 3'b110}: begin  
              alu_operator_o = ALU_ADD;
              div_sel_o      = (RV32M == RV32MNone) ? 1'b0 : 1'b1;
            end
            {7'b000_0001, 3'b111}: begin  
              alu_operator_o = ALU_ADD;
              div_sel_o      = (RV32M == RV32MNone) ? 1'b0 : 1'b1;
            end

`line 1480 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            default: ;
          endcase
        end
      end

`line 1485 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
       
       
       

`line 1489 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_MISC_MEM: begin
        unique case (instr_alu[14:12])
          3'b000: begin
             
            alu_operator_o     = ALU_ADD;  
            alu_op_a_mux_sel_o = OP_A_REG_A;
            alu_op_b_mux_sel_o = OP_B_IMM;
          end
          3'b001: begin
             
            if (BranchTargetALU) begin
              bt_a_mux_sel_o     = OP_A_CURRPC;
              bt_b_mux_sel_o     = IMM_B_INCR_PC;
            end else begin
              alu_op_a_mux_sel_o = OP_A_CURRPC;
              alu_op_b_mux_sel_o = OP_B_IMM;
              imm_b_mux_sel_o    = IMM_B_INCR_PC;
              alu_operator_o     = ALU_ADD;
            end
          end
          default: ;
        endcase
      end

`line 1513 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_SYSTEM: begin
        if (instr_alu[14:12] == 3'b000) begin
           
          alu_op_a_mux_sel_o = OP_A_REG_A;
          alu_op_b_mux_sel_o = OP_B_IMM;
        end else begin
           
          alu_op_b_mux_sel_o = OP_B_IMM;
          imm_a_mux_sel_o    = IMM_A_Z;
          imm_b_mux_sel_o    = IMM_B_I;   

`line 1524 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
          if (instr_alu[14]) begin
             
            alu_op_a_mux_sel_o = OP_A_IMM;
          end else begin
            alu_op_a_mux_sel_o = OP_A_REG_A;
          end
        end
      end
       
       
       

`line 1536 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_STORE_FP: begin
        alu_op_a_mux_sel_o = OP_A_REG_A;
        alu_op_b_mux_sel_o = OP_B_REG_B;
        alu_operator_o     = ALU_ADD;

`line 1541 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
        unique case(instr[14:12])
          3'b011: begin  
            imm_b_mux_sel_o     = IMM_B_S;
            alu_op_b_mux_sel_o  = OP_B_IMM;
          end
          3'b010: begin  
            imm_b_mux_sel_o     = IMM_B_S;
            alu_op_b_mux_sel_o  = OP_B_IMM;
          end
          default: ;
        endcase
      end

`line 1554 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_LOAD_FP: begin
        unique case(instr[14:12])
          3'b011: begin  
            alu_op_a_mux_sel_o    = OP_A_REG_A;

`line 1559 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            alu_operator_o      = ALU_ADD;
            alu_op_b_mux_sel_o  = OP_B_IMM;
            imm_b_mux_sel_o     = IMM_B_I;
          end
          3'b010: begin  
            alu_op_a_mux_sel_o    = OP_A_REG_A;

`line 1566 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
            alu_operator_o      = ALU_ADD;
            alu_op_b_mux_sel_o  = OP_B_IMM;
            imm_b_mux_sel_o     = IMM_B_I;
          end
          default: ;
        endcase
      end

`line 1574 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_MADD_FP:  begin  
        unique case (instr[26:25])
          01: begin
            fp_alu_operator_o     = FMADD;
            fp_alu_op_mod_o       = 1'b0;
          end
          00: begin
            fp_alu_operator_o     = FMADD;
            fp_alu_op_mod_o       = 1'b0;
          end
          default: ;
        endcase
      end

`line 1588 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_MSUB_FP: begin  
        unique case (instr[26:25])
          01: begin
            fp_alu_operator_o     = FMADD;
            fp_alu_op_mod_o       = 1'b1;
          end
          00: begin
            fp_alu_operator_o     = FMADD;
            fp_alu_op_mod_o       = 1'b1;
          end
          default: ;
        endcase
      end

`line 1602 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_NMSUB_FP: begin  
        unique case (instr[26:25])
          01: begin
            fp_alu_operator_o     = FNMSUB;
          end
          00: begin
            fp_alu_operator_o     = FNMSUB;
          end
          default: ;
        endcase
      end

`line 1614 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_NMADD_FP: begin  
        unique case (instr[26:25])
          01: begin
            fp_alu_operator_o     = FNMSUB;
            fp_alu_op_mod_o       = 1'b1;
          end
          00: begin
            fp_alu_operator_o     = FNMSUB;
            fp_alu_op_mod_o       = 1'b1;
          end
          default: ;
        endcase
      end

`line 1628 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
      OPCODE_OP_FP: begin
        unique case (instr[31:25])
          7'b0000001: begin  
            fp_alu_operator_o     = ADD;
          end
          7'b0000101: begin  
            fp_alu_operator_o     = ADD;
            fp_alu_op_mod_o       = 1'b1;
          end
          7'b0001001: begin  
            fp_alu_operator_o     = MUL;
          end
          7'b0001101:begin  
            fp_alu_operator_o     = DIV;
          end
          7'b0000000: begin  
            fp_alu_operator_o     = ADD;
          end
          7'b0000100: begin  
            fp_alu_operator_o     = ADD;
            fp_alu_op_mod_o       = 1'b1;
          end
          7'b0001000: begin  
            fp_alu_operator_o     = MUL;
          end
          7'b0001100: begin  
            fp_alu_operator_o     = DIV;
          end
          7'b0101101: begin
            if (~|instr[24:20]) begin  
              fp_alu_operator_o     = SQRT;
            end
          end
          7'b0101100: begin  
            if (~|instr[24:20]) begin
              fp_alu_operator_o     = SQRT;
            end
          end
          7'b0010001: begin  
            if (~(instr[14] | (&instr[13:12]))) begin
              fp_alu_operator_o     = SGNJ;
            end
          end
          7'b0010000: begin  
            if (~(instr[14] | (&instr[13:12]))) begin
              fp_alu_operator_o     = SGNJ;
            end
          end
          7'b0010101: begin  
            if (~|instr[14:13]) begin
              fp_alu_operator_o     = MINMAX;
            end
          end
          7'b0010100: begin  
            if (~|instr[14:13]) begin
              fp_alu_operator_o     = MINMAX;
            end
          end
          7'b0100000: begin  
            if (~(|instr[24:21] | (~instr[20]))) begin
              fp_alu_operator_o     = F2F;
            end
          end
          7'b1100000: begin  
            if (~|instr[24:21]) begin
              fp_alu_operator_o     = F2I;

`line 1695 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
              if (instr[20])
                fp_alu_op_mod_o       = 1'b1;
            end
          end
          7'b0100001: begin  
            if (~|instr[24:20]) begin
              fp_alu_operator_o     = F2F;
            end
          end
          7'b1110000: begin  
            unique case ({instr[24:20],instr[14:12]})
              {3'b0000000,3'b000}: begin
                fp_alu_operator_o     = ADD;  
              end
              {3'b000,3'b001}: begin
                fp_alu_operator_o     = CLASSIFY;
              end
              default: ;
            endcase
          end
          7'b1010001: begin  
            if ((~instr[14]) | (&instr[13:12])) begin
              fp_alu_operator_o     = CMP;
            end
          end
          7'b1010000: begin  
            if ((~instr[14]) | (&instr[13:12])) begin
              fp_alu_operator_o     = CMP;
            end
          end
          7'b1110001: begin  
            unique case ({instr[24:20],instr[14:12]})
              {3'b000,3'b001}: begin
                fp_alu_operator_o     = CLASSIFY;
              end
              default: ;
            endcase
          end
          7'b1100001: begin  
            if (~|instr[24:21]) begin
              fp_alu_operator_o     = F2I;

`line 1737 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
              if (instr[20])
                fp_alu_op_mod_o     = 1'b1;
            end
          end
          7'b1101000: begin  
            if (~(|instr[24:21])) begin
              fp_alu_operator_o     = I2F;

`line 1745 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
              if (instr[20])
                fp_alu_op_mod_o     = 1'b1;
            end
          end
          7'b1111001: begin  
            if (~|instr[24:21]) begin
              fp_alu_operator_o     = I2F;

`line 1753 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
              if (instr[20])
                fp_alu_op_mod_o     = 1'b1;
            end
          end
          7'b1111000: begin  
            if (~(|instr[24:20]) | (|instr[14:12])) begin
              fp_alu_operator_o     = ADD;  
            end
          end
          default: ;
        endcase
      end
      default: ;
    endcase
  end

`line 1769 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
  assign mult_en_o = illegal_insn ? 1'b0 : mult_sel_o;
  assign div_en_o  = illegal_insn ? 1'b0 : div_sel_o;

`line 1773 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
   
  assign illegal_insn_o = illegal_insn | illegal_reg_rv32e;

`line 1777 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
  assign rf_we_o = rf_we & ~illegal_reg_rv32e;

`line 1780 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
  assign unused_instr_alu = {instr_alu[19:15],instr_alu[11:7]};

`line 1783 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
   
   

`line 1787 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
   
  

`line 1790 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 0
endmodule  

`line 1792 "../src/merl_azadi-II_azadi_ibex_core_1.0/src/vendor/lowrisc_ibex/rtl/ibex_decoder.sv" 2
